{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Juno","tagline":"a unified interface to key/value stores (moneta replacement)","body":"Juno: A unified interface for key/value stores\r\n==============================================\r\n\r\n[![Build Status](https://secure.travis-ci.org/minad/juno.png?branch=master)](http://travis-ci.org/minad/juno) [![Dependency Status](https://gemnasium.com/minad/juno.png?travis)](https://gemnasium.com/minad/juno) [![Code Climate](https://codeclimate.com/badge.png)](https://codeclimate.com/github/minad/juno)\r\n\r\nJuno provides a standard interface for interacting with various kinds of key/value stores. Juno\r\nis based on Moneta and replaces it with a mostly compatible interface. The reason for the\r\nfork was that Moneta was unmaintained for a long time.\r\n\r\nJuno is very feature rich:\r\n\r\n* Supports a lot of backends (See below)\r\n* Supports proxies (Similar to [Rack middlewares](http://rack.github.com/))\r\n* Custom serialization via `Juno::Transformer` proxy (Marshal/JSON/YAML and many more)\r\n* Custom key transformation via `Juno::Transformer` proxy\r\n* Value compression via `Juno::Transformer` proxy (Zlib, Snappy, QuickLZ, LZO)\r\n* Expiration for all stores (Added via proxy `Juno::Expires` if not supported natively)\r\n* Integration with Rack as cookie and session store and Rack-Cache\r\n\r\nJuno is tested thoroughly using [Travis-CI](http://travis-ci.org/minad/juno).\r\n\r\nSupported backends\r\n------------------\r\n\r\nOut of the box, it supports the following backends:\r\n\r\n* Memory:\r\n    * In-memory store (`:Memory`)\r\n    * LRU hash (`:LRUHash`)\r\n    * LocalMemCache (`:LocalMemCache`)\r\n    * Memcached store (`:Memcached`, `:MemcachedNative` and `:MemcachedDalli`)\r\n* Relational Databases:\r\n    * DataMapper (`:DataMapper`)\r\n    * ActiveRecord (`:ActiveRecord`)\r\n    * Sequel (`:Sequel`)\r\n    * Sqlite3 (`:Sqlite`)\r\n* Filesystem:\r\n    * PStore (`:PStore`)\r\n    * YAML store (`:YAML`)\r\n    * Filesystem directory store (`:File`)\r\n    * Filesystem directory store which spreads files in subdirectories using md5 hash (`:HashFile`)\r\n* Key/value databases:\r\n    * Berkeley DB (`:DBM`)\r\n    * GDBM (`:GDBM`)\r\n    * SDBM (`:SDBM`)\r\n    * Redis (`:Redis`)\r\n    * Riak (`:Riak`)\r\n    * TokyoCabinet (`:TokyoCabinet`)\r\n    * Cassandra (`:Cassandra`)\r\n    * LevelDB (`:LevelDB`)\r\n* Document databases:\r\n    * CouchDB (`:Couch`)\r\n    * MongoDB (`:Mongo`)\r\n* Other\r\n    * Fog cloud storage which supports Amazon S3, Rackspace, etc. (`:Fog`)\r\n    * Storage which doesn't store anything (`:Null`)\r\n\r\nSome of the backends are not exactly based on key/value stores, e.g. the relational ones. These\r\nare useful if you already use the corresponding backend in your application. You get a key/value\r\nstore for free then without installing any additional services and you still have the possibility\r\nto upgrade to a real key/value store.\r\n\r\nProxies\r\n-------\r\n\r\nIn addition it supports proxies (Similar to [Rack middlewares](http://rack.github.com/)) which\r\nadd additional features to storage backends:\r\n\r\n* `Juno::Proxy` proxy base class\r\n* `Juno::Expires` to add expiration support to stores which don't support it natively. Add it in the builder using `use :Expires`.\r\n* `Juno::Stack` to stack multiple stores (Read returns result from first where the key is found, writes go to all stores). Add it in the builder using `use :Stack`.\r\n* `Juno::Transformer` transforms keys and values (Marshal, YAML, JSON, Base64, MD5, ...). Add it in the builder using `use :Transformer`.\r\n* `Juno::Cache` combine two stores, one as backend and one as cache (e.g. Juno::Adapters::File + Juno::Adapters::Memory). Add it in the builder using `use :Cache`.\r\n* `Juno::Lock` to make store thread safe. Add it in the builder using `use :Lock`.\r\n* `Juno::Logger` to log database accesses. Add it in the builder using `use :Logger`.\r\n\r\nThe Juno API is purposely extremely similar to the Hash API. In order so support an\r\nidentical API across stores, it does not support iteration or partial matches.\r\n\r\nSupported serializers and compressors (`Juno::Transformer`)\r\n-----------------------------------------------------------\r\n\r\nSupported serializers:\r\n\r\n* BEncode (`:bencode`)\r\n* BERT (`:bert`)\r\n* BSON (`:bson`)\r\n* JSON (`:json`)\r\n* Marshal (`:marshal`)\r\n* MessagePack (`:msgpack`)\r\n* Ox (`:ox`)\r\n* TNetStrings (`:tnet`)\r\n* YAML (`:yaml`)\r\n\r\nSupported value compressors:\r\n\r\n* LZMA (`:lzma`)\r\n* LZO (`:lzo`)\r\n* Snappy (`:snappy`)\r\n* QuickLZ (`:quicklz`)\r\n* Zlib (`:zlib`)\r\n\r\nSpecial transformers:\r\n\r\n* Digests (MD5, Shas, ...)\r\n* Add prefix to keys (`:prefix`)\r\n* HMAC to verify values (:hmac, useful for Rack::JunoCookies)\r\n\r\nLinks\r\n-----\r\n\r\n* Source: <http://github.com/minad/juno>\r\n* Bugs:   <http://github.com/minad/juno/issues>\r\n* API documentation:\r\n    * Latest Gem: <http://rubydoc.info/gems/juno/frames>\r\n    * GitHub master: <http://rubydoc.info/github/minad/juno/master/frames>\r\n\r\nJuno API\r\n--------\r\n\r\n~~~\r\n#initialize(options)              options differs per-store, and is used to set up the store\r\n\r\n#[](key)                          retrieve a key. if the key is not available, return nil\r\n\r\n#load(key, options = {})          retrieve a key. if the key is not available, return nil\r\n\r\n#fetch(key, options = {}, &block) retrieve a key. if the key is not available, execute the\r\n                                  block and return its return value.\r\n\r\n#fetch(key, value, options = {})  retrieve a key. if the key is not available, return the value\r\n\r\n#[]=(key, value)                  set a value for a key. if the key is already used, clobber it.\r\n                                  keys set using []= will never expire\r\n\r\n#delete(key, options = {})        delete the key from the store and return the current value\r\n\r\n#key?(key, options = {})          true if the key exists, false if it does not\r\n\r\n#store(key, value, options = {})  same as []=, but you can supply options\r\n\r\n#clear(options = {})              clear all keys in this store\r\n\r\n#close                            close database connection\r\n~~~\r\n\r\nCreating a Store\r\n----------------\r\n\r\nThere is a simple interface to create a store using `Juno.new`:\r\n\r\n~~~ ruby\r\nstore = Juno.new(:Memcached, :server => 'localhost:11211')\r\n~~~\r\n\r\nIf you want to have control over the proxies, you have to use `Juno.build`:\r\n\r\n~~~ ruby\r\nstore = Juno.build do\r\n  # Adds expires proxy\r\n  use :Expires\r\n  # Transform key using Marshal and Base64 and value using Marshal\r\n  use :Transformer, :key => [:marshal, :base64], :value => :marshal\r\n  # Memory backend\r\n  adapter :Memory\r\nend\r\n~~~\r\n\r\nExpiration\r\n----------\r\n\r\nThe Cassandra, Memcached and Redis backends supports expires values directly:\r\n\r\n~~~ ruby\r\ncache = Juno::Adapters::Memcached.new\r\n\r\n# Or using the builder...\r\ncache = Juno.build do\r\n  adapter :Memcached\r\nend\r\n\r\n# Expires in 60 seconds\r\ncache.store(key, value, :expires => 60)\r\n~~~\r\n\r\nYou can add the expires feature to other backends using the Expires proxy:\r\n\r\n~~~ ruby\r\n# Using the :expires option\r\ncache = Juno.new(:File, :dir => '...', :expires => true)\r\n\r\n# or manually by using the proxy...\r\ncache = Juno::Expires.new(Juno::Adapters::File.new(:dir => '...'))\r\n\r\n# or using the builder...\r\ncache = Juno.build do\r\n  use :Expires\r\n  adapter :File, :dir => '...'\r\nend\r\n~~~\r\n\r\nFramework Integration\r\n---------------------\r\n\r\nInspired by [redis-store](https://github.com/jodosha/redis-store) there exist integration classes for Rack and Rack-Cache.\r\n\r\nUse Juno as a Rack session store:\r\n\r\n~~~ ruby\r\nrequire 'rack/session/juno'\r\n\r\nuse Rack::Session::Juno, :store => :Redis\r\nuse Rack::Session::Juno, :store => Juno.new(:Memory, :expires => true)\r\n\r\nuse Rack::Session::Juno do\r\n  use :Expires\r\n  adapter :Memory\r\nend\r\n~~~\r\n\r\nUse Juno as a Rack-Cache store:\r\n\r\n~~~ ruby\r\nrequire 'rack/cache/juno'\r\n\r\nuse Rack::Cache,\r\n      :metastore   => 'juno://Memory?expires=true',\r\n      :entitystore => 'juno://Memory?expires=true'\r\n\r\n# Or used named Juno stores\r\nRack::Cache::Juno['named_metastore'] = Juno.build do\r\n  use :Expires\r\n  adapter :Memory\r\nend\r\nuse Rack::Cache,\r\n      :metastore => 'juno://named_metastore',\r\n      :entity_store => 'juno://named_entitystore'\r\n~~~\r\n\r\nUse Juno to store cookies in Rack. It uses the `Juno::Adapters::Cookie`. You might\r\nwonder what the purpose of this store or Rack middleware is: It makes it possible\r\nto use all the transformers on the cookies (e.g. :prefix, :marshal and :hmac for value verification).\r\n\r\n~~~ ruby\r\nrequire 'rack/juno_cookies'\r\n\r\nuse Rack::JunoCookies, :domain => 'example.com', :path => '/path'\r\nrun lambda do |env|\r\n  req = Rack::Request.new(env)\r\n  req.cookies #=> is now a Juno store!\r\n  env['rack.request.cookie_hash'] #=> is now a Juno store!\r\n  req.cookies['key'] #=> retrieves 'key'\r\n  req.cookies['key'] = 'value' #=> sets 'key'\r\n  req.cookies.delete('key') #=> removes 'key'\r\n  [200, {}, []]\r\nend\r\n~~~\r\n\r\nAlternatives\r\n------------\r\n\r\n* [Moneta](https://github.com/wycats/moneta): Juno is based on Moneta, but Juno supports more features and more backends and is actively developed\r\n* [Horcrux](https://github.com/technoweenie/horcrux): Used at github, supports batch operations but only Memcached backend\r\n* [ToyStore](https://github.com/jnunemaker/toystore): ORM mapper for key/value stores\r\n* [ToyStore Adapter](https://github.com/jnunemaker/adapter): Adapter to key/value stores used by ToyStore, Juno can be used directly with the ToyStore Memory adapter\r\n\r\nAuthors\r\n-------\r\n\r\n* Daniel Mendler\r\n* Hannes Georg\r\n* Moneta originally by Yehuda Katz and contributors\r\n","google":""}