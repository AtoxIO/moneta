# Generated by generate.rb at 2012-12-02 15:00:09 +0100, heads/master-0-gab73edc
require 'helper'

begin
  store = Juno::Adapters::ActiveRecord.new(:connection => { :adapter => (defined?(JRUBY_VERSION) ? 'jdbcsqlite3' : 'sqlite3'), :database => File.join(make_tempdir, 'adapter_activerecord') })
  store['foo'] = 'bar'
  store.clear
  store.close

  describe "adapter_activerecord" do
    let(:store) do
      Juno::Adapters::ActiveRecord.new(:connection => { :adapter => (defined?(JRUBY_VERSION) ? 'jdbcsqlite3' : 'sqlite3'), :database => File.join(make_tempdir, 'adapter_activerecord') })
    end

    include_context 'juno_store'
    it_should_behave_like 'null_stringkey_stringvalue'
    it_should_behave_like 'store_stringkey_stringvalue'
    it_should_behave_like 'returndifferent_stringkey_stringvalue'
    it 'updates an existing key/value' do
      store['foo/bar'] = '1'
      store['foo/bar'] = '2'
      records = store.table.find :all, :conditions => { :k => 'foo/bar' }
      records.count.should == 1
    end

    it 'uses an existing connection' do
      ActiveRecord::Base.establish_connection :adapter => (defined?(JRUBY_VERSION) ? 'jdbcsqlite3' : 'sqlite3'), :database => File.join(make_tempdir, 'activerecord-existing')

      store = Juno::Adapters::ActiveRecord.new
      store.table.table_exists?.should == true
    end

  end
rescue LoadError => ex
  puts "\e[31mTest adapter_activerecord not executed: #{ex.message}\e[0m"
rescue Exception => ex
  puts "\e[31mTest adapter_activerecord not executed: #{ex.message}\e[0m"
  puts ex.backtrace.join("\n")
end
